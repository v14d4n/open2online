buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
// Mixin
apply plugin: 'org.spongepowered.mixin'

version = '1.18.1-0.0.2b'
group = 'com.v14d4n.opentoonline' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'opentoonline'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {

    mappings channel: 'parchment', version: '2022.02.13-1.18.1'

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                opentoonline {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    embed
    compile.extendsFrom(embed)
}
repositories {
    mavenCentral()
}
dependencies {
    minecraft 'net.minecraftforge:forge:1.18.1-39.0.76'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    implementation 'org.bitlet:weupnp:0.1.4'
    implementation fileTree(dir: 'libs', include: '*.jar')
    embed fileTree(dir: 'libs', include: '*.jar')
    embed('org.bitlet:weupnp:0.1.4')
}

mixin {
    // MixinGradle Settings
    add sourceSets.main, 'opentoonline.mixin-refmap.json'
    config 'opentoonline.mixin.json'
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    from configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }
    manifest {
        attributes([
                "Specification-Title"     : "opentoonline",
                "Specification-Vendor"    : "opentoonlinesareus",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "opentoonlinesareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}