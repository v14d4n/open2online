buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://plugins.gradle.org/m2/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}
plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
// Shadow
apply plugin: 'net.minecraftforge.gradle'
// Mixin
apply plugin: 'org.spongepowered.mixin'

version = '1.16.5-0.0.3b'
group = 'com.v14d4n.opentoonline' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'opentoonline'

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

minecraft {

    mappings channel: 'parchment', version: '2022.03.06-1.16.5'

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                opentoonline {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    shade
    implementation.extendsFrom shade
}
repositories {
    mavenCentral()
}
dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.34'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    shade 'com.simtechdata:WaifUPnP:1.0'
    shade 'org.apache.commons:commons-collections4:4.4'
    shade 'com.offbynull.portmapper:portmapper:2.0.5'
    shade 'org.bitlet:weupnp:0.1.4'
//    shade fileTree(dir: 'libs', include: '*.jar')
}

mixin {
    // MixinGradle Settings
    add sourceSets.main, 'opentoonline.mixin-refmap.json'
    config 'opentoonline.mixin.json'
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    archiveClassifier = 'slim'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes([
                "Specification-Title"     : "opentoonline",
                "Specification-Vendor"    : "opentoonlinesareus",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "opentoonlinesareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

shadowJar {
    archiveClassifier = ''
    configurations = [project.configurations.shade]
    relocate 'org.apache.commons', "${project.group}.relocated.commons"
    relocate 'com.offbynull.portmapper', "${project.group}.relocated.portmapper"
    relocate 'org.bitlet.weupnp', "${project.group}.relocated.weupnp"
    relocate 'com.simtechdata.waifupnp', "${project.group}.relocated.waifupnp"
    finalizedBy 'reobfShadowJar'
}

assemble.dependsOn shadowJar

reobf {
    shadowJar {}
}
// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
// jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}